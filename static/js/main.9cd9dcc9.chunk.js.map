{"version":3,"sources":["Modal.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["styles","display","alignItems","justifyContent","position","top","left","margin","backgroundColor","width","height","Modal","onClose","children","id","style","onClick","e","target","root","padding","fontSize","form","input","borderStyle","button","borderRadius","color","cursor","Form","coordinates","name","onSubmit","preventDefault","textAlign","htmlFor","readOnly","type","value","lat","lng","console","log","mapStyles","App","useState","location","status","locationInfo","setLocationInfo","modalOpen","setModalOpen","locationSuccessCallback","loc","coords","latitude","longitude","locationErrorCallback","err","message","useEffect","undefined","navigator","geolocation","getCurrentPosition","timeout","googleMapsApiKey","mapContainerStyle","zoom","center","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9cd9dcc9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MY_MODAL_ID = 'my-modal-id';\r\n\r\nconst styles = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    margin: 0,\r\n    backgroundColor: '#2f2f2f90',\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nfunction Modal({ onClose, children }) {\r\n    const modalClose = e => {\r\n        if (typeof onClose === 'function' && e.target.id === MY_MODAL_ID) {\r\n            onClose(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id={MY_MODAL_ID} style={styles} onClick={modalClose}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n    root: {\r\n        padding: '0',\r\n        width: '400px',\r\n        fontSize: '14px',\r\n        backgroundColor: 'white',\r\n    },\r\n    form: {\r\n        width: '80%',\r\n        padding: '10px',\r\n        margin: '0 auto',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n        height: '30px',\r\n        margin: '10px 0',\r\n        borderStyle: 'none',\r\n        backgroundColor: '#d4d4d4',\r\n        padding: '0',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        height: '40px',\r\n        backgroundColor: '#1976d2',\r\n        borderRadius: '5px',\r\n        margin: '10px 0 20px 0',\r\n        color: 'white',\r\n        fontSize: '16px',\r\n        cursor: 'pointer',\r\n    },\r\n};\r\n\r\nfunction Form({ coordinates, name }) {\r\n    const onClick = e => {\r\n        e.preventDefault();\r\n        console.log(\r\n            `Coordinates: { Lat: ${coordinates.lat}, Lng: ${coordinates.lng} }`\r\n        );\r\n        console.log(`Name: ${name}`);\r\n    };\r\n\r\n    return (\r\n        <div style={styles.root}>\r\n            <form style={styles.form} onSubmit={e => e.preventDefault()}>\r\n                <h3 style={{ textAlign: 'center' }}>Log to Console</h3>\r\n                <label htmlFor=\"coordinates\">Coordinates:</label>\r\n                <br />\r\n                <input\r\n                    readOnly={true}\r\n                    style={styles.input}\r\n                    id=\"coordinates\"\r\n                    type=\"text\"\r\n                    value={`Lat: ${coordinates.lat}, Lng: ${coordinates.lng}`}\r\n                />\r\n                <br />\r\n                <label htmlFor=\"name\">Name: </label>\r\n                <br />\r\n                <input\r\n                    readOnly={true}\r\n                    style={styles.input}\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    value={`${name}`}\r\n                />\r\n                <br />\r\n                <button style={styles.button} onClick={onClick}>\r\n                    Log To Console\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\r\n\r\nimport Modal from './Modal';\r\nimport Form from './Form';\r\n\r\n// I don't have a credit card so no API key :(\r\n// Otherwise would have read the key from a .env file\r\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n\r\n// This allows the map to load with placeholder tiles\r\nconst GOOGLE_MAPS_API_KEY = undefined;\r\n\r\nconst mapStyles = {\r\n    height: '100vh',\r\n    width: '100%',\r\n};\r\n\r\nconst myName = 'Raihanul Islam Refat';\r\n\r\nconst App = () => {\r\n    const [locationInfo, setLocationInfo] = useState({\r\n        location: null,\r\n        status: '',\r\n    });\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n\r\n    const locationSuccessCallback = loc => {\r\n        setLocationInfo({\r\n            location: {\r\n                lat: loc.coords.latitude,\r\n                lng: loc.coords.longitude,\r\n            },\r\n            status: 'Location found',\r\n        });\r\n    };\r\n\r\n    const locationErrorCallback = err => {\r\n        setLocationInfo({ location: null, status: err.message });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (navigator.geolocation === undefined) {\r\n            setLocationInfo({\r\n                location: null,\r\n                status: 'Geolocation is unavailable in your browser',\r\n            });\r\n            return;\r\n        }\r\n        setLocationInfo({\r\n            ...locationInfo,\r\n            status: 'Requesting permission...',\r\n        });\r\n        navigator.geolocation.getCurrentPosition(\r\n            locationSuccessCallback,\r\n            locationErrorCallback,\r\n            {\r\n                timeout: 30000,\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {locationInfo.location !== null ? (\r\n                <LoadScript googleMapsApiKey={GOOGLE_MAPS_API_KEY}>\r\n                    <GoogleMap\r\n                        mapContainerStyle={mapStyles}\r\n                        zoom={10}\r\n                        center={locationInfo.location}\r\n                    >\r\n                        <Marker\r\n                            position={locationInfo.location}\r\n                            onClick={() => setModalOpen(true)}\r\n                        />\r\n                    </GoogleMap>\r\n                </LoadScript>\r\n            ) : (\r\n                <h4>{locationInfo.status}</h4>\r\n            )}\r\n            {modalOpen && (\r\n                <Modal onClose={() => setModalOpen(false)}>\r\n                    <Form coordinates={locationInfo.location} name={myName} />\r\n                </Modal>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}