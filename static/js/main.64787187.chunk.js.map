{"version":3,"sources":["Modal.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["styles","position","top","left","margin","padding","backgroundColor","width","height","Modal","onClose","children","id","style","onClick","e","target","root","fontSize","form","input","borderStyle","button","borderRadius","color","Form","coordinates","name","onSubmit","preventDefault","textAlign","htmlFor","readOnly","type","value","lat","lng","console","log","mapStyles","myLocation","App","useState","modalOpen","setModalOpen","googleMapsApiKey","undefined","mapContainerStyle","zoom","center","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yMAIMA,EAAS,CACXC,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,QAAS,EACTC,gBAAiB,YACjBC,MAAO,OACPC,OAAQ,SAiBGC,MAdf,YAAuC,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SAOtB,OACI,yBAAKC,GArBO,cAqBUC,MAAOb,EAAQc,QAPtB,SAAAC,GACQ,oBAAZL,GAfC,gBAeyBK,EAAEC,OAAOJ,IAC1CF,EAAQK,KAMPJ,ICtBPX,EAAS,CACXiB,KAAM,CACFhB,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,OAAQ,aACRC,QAAS,IACTE,MAAO,MACPW,SAAU,OACVZ,gBAAiB,SAErBa,KAAM,CACFZ,MAAO,MACPF,QAAS,OACTD,OAAQ,UAEZgB,MAAO,CACHb,MAAO,OACPC,OAAQ,OACRJ,OAAQ,SACRiB,YAAa,OACbf,gBAAiB,UACjBD,QAAS,KAEbiB,OAAQ,CACJf,MAAO,OACPC,OAAQ,OACRF,gBAAiB,UACjBiB,aAAc,MACdnB,OAAQ,gBACRoB,MAAO,QACPN,SAAU,SA6CHO,MAzCf,YAAsC,IAAtBC,EAAqB,EAArBA,YAAaC,EAAQ,EAARA,KASzB,OACI,yBAAKd,MAAOb,EAAOiB,MACf,0BAAMJ,MAAOb,EAAOmB,KAAMS,SAAU,SAAAb,GAAC,OAAIA,EAAEc,mBACvC,wBAAIhB,MAAO,CAAEiB,UAAW,WAAxB,kBACA,2BAAOC,QAAQ,eAAf,gBACA,6BACA,2BACIC,UAAU,EACVnB,MAAOb,EAAOoB,MACdR,GAAG,cACHqB,KAAK,OACLC,MAAK,eAAUR,EAAYS,IAAtB,kBAAmCT,EAAYU,OAExD,6BACA,2BAAOL,QAAQ,QAAf,UACA,6BACA,2BACIC,UAAU,EACVnB,MAAOb,EAAOoB,MACdR,GAAG,OACHqB,KAAK,OACLC,MAAK,UAAKP,KAEd,6BACA,4BAAQd,MAAOb,EAAOsB,OAAQR,QAhC1B,SAAAC,GACZA,EAAEc,iBACFQ,QAAQC,IAAR,8BAC2BZ,EAAYS,IADvC,kBACoDT,EAAYU,IADhE,OAGAC,QAAQC,IAAR,gBAAqBX,MA2Bb,qBCzDVY,EAAY,CACd/B,OAAQ,QACRD,MAAO,QAILiC,EAAa,CACfL,IAAK,UACLC,IAAK,WA6BMK,EA1BH,WAAO,IAAD,EACoBC,oBAAS,GAD7B,mBACPC,EADO,KACIC,EADJ,KAGd,OACI,6BACI,kBAAC,IAAD,CAAYC,sBAlBIC,GAmBZ,kBAAC,IAAD,CACIC,kBAAmBR,EACnBS,KAAM,GACNC,OAAQT,GAER,kBAAC,IAAD,CACIvC,SAAUuC,EACV1B,QAAS,kBAAM8B,GAAa,QAIvCD,GACG,kBAAC,EAAD,CAAOjC,QAAS,kBAAMkC,GAAa,KAC/B,kBAAC,EAAD,CAAMlB,YAAac,EAAYb,KAzBpC,sBCNKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,a","file":"static/js/main.64787187.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MY_MODAL_ID = 'my-modal-id';\r\n\r\nconst styles = {\r\n    position: 'absolute',\r\n    top: 0,\r\n    left: 0,\r\n    margin: 0,\r\n    padding: 0,\r\n    backgroundColor: '#38383890',\r\n    width: '100%',\r\n    height: '100vh',\r\n};\r\n\r\nfunction Modal({ onClose, children }) {\r\n    const modalClose = e => {\r\n        if (typeof onClose === 'function' && e.target.id === MY_MODAL_ID) {\r\n            onClose(e);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div id={MY_MODAL_ID} style={styles} onClick={modalClose}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\n\r\nconst styles = {\r\n    root: {\r\n        position: 'relative',\r\n        top: '25%',\r\n        left: '50%',\r\n        margin: '0 0 0 -10%',\r\n        padding: '0',\r\n        width: '20%',\r\n        fontSize: '14px',\r\n        backgroundColor: 'white',\r\n    },\r\n    form: {\r\n        width: '80%',\r\n        padding: '10px',\r\n        margin: '0 auto',\r\n    },\r\n    input: {\r\n        width: '100%',\r\n        height: '30px',\r\n        margin: '10px 0',\r\n        borderStyle: 'none',\r\n        backgroundColor: '#d4d4d4',\r\n        padding: '0',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        height: '40px',\r\n        backgroundColor: '#1976d2',\r\n        borderRadius: '5px',\r\n        margin: '10px 0 20px 0',\r\n        color: 'white',\r\n        fontSize: '16px',\r\n    },\r\n};\r\n\r\nfunction Form({ coordinates, name }) {\r\n    const onClick = e => {\r\n        e.preventDefault();\r\n        console.log(\r\n            `Coordinates: { Lat: ${coordinates.lat}, Lng: ${coordinates.lng} }`\r\n        );\r\n        console.log(`Name: ${name}`);\r\n    };\r\n\r\n    return (\r\n        <div style={styles.root}>\r\n            <form style={styles.form} onSubmit={e => e.preventDefault()}>\r\n                <h3 style={{ textAlign: 'center' }}>Log to Console</h3>\r\n                <label htmlFor=\"coordinates\">Coordinates:</label>\r\n                <br />\r\n                <input\r\n                    readOnly={true}\r\n                    style={styles.input}\r\n                    id=\"coordinates\"\r\n                    type=\"text\"\r\n                    value={`Lat: ${coordinates.lat}, Lng: ${coordinates.lng}`}\r\n                />\r\n                <br />\r\n                <label htmlFor=\"name\">Name: </label>\r\n                <br />\r\n                <input\r\n                    readOnly={true}\r\n                    style={styles.input}\r\n                    id=\"name\"\r\n                    type=\"text\"\r\n                    value={`${name}`}\r\n                />\r\n                <br />\r\n                <button style={styles.button} onClick={onClick}>\r\n                    Log To Console\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form;\r\n","import React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\n\nimport Modal from './Modal';\nimport Form from './Form';\n\n// I don't have a credit card so no API key :(\n// Otherwise would have read the key from a .env file\n// const GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n\n// This allows the map to load with placeholder tiles\nconst GOOGLE_MAPS_API_KEY = undefined;\n\nconst mapStyles = {\n    height: '100vh',\n    width: '100%',\n};\n\nconst myName = 'Raihanul Islam';\nconst myLocation = {\n    lat: 22.896807,\n    lng: 89.508878,\n};\n\nconst App = () => {\n    const [modalOpen, setModalOpen] = useState(false);\n\n    return (\n        <div>\n            <LoadScript googleMapsApiKey={GOOGLE_MAPS_API_KEY}>\n                <GoogleMap\n                    mapContainerStyle={mapStyles}\n                    zoom={10}\n                    center={myLocation}\n                >\n                    <Marker\n                        position={myLocation}\n                        onClick={() => setModalOpen(true)}\n                    />\n                </GoogleMap>\n            </LoadScript>\n            {modalOpen && (\n                <Modal onClose={() => setModalOpen(false)}>\n                    <Form coordinates={myLocation} name={myName} />\n                </Modal>\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}